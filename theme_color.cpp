//=============================================================================
// 
// 色管理クラス
// Author YudaKaito
// 
//=============================================================================
//-----------------------------------------------------------------------------
// include
//-----------------------------------------------------------------------------
#include "theme_color.h"
#include "file.h"
#include "application.h"
#include "texture.h"

//-----------------------------------------------------------------------------
// 静的変数
//-----------------------------------------------------------------------------
static const nlohmann::json colorFile = LoadJsonStage(L"data/FILE/color.json");

//-----------------------------------------------------------------------------
// コンストラクタ
//-----------------------------------------------------------------------------
CThemeColor::CThemeColor()
{
}

//-----------------------------------------------------------------------------
// デストラクタ
//-----------------------------------------------------------------------------
CThemeColor::~CThemeColor()
{
}

//-----------------------------------------------------------------------------
// 初期化
//-----------------------------------------------------------------------------
HRESULT CThemeColor::Init()
{
	SetTheme(0);

	return S_OK;
}

//-----------------------------------------------------------------------------
// 終了
//-----------------------------------------------------------------------------
void CThemeColor::Uninit()
{
}

//-----------------------------------------------------------------------------
// 更新
//-----------------------------------------------------------------------------
void CThemeColor::Update()
{
}

//-----------------------------------------------------------------------------
// 描画
//-----------------------------------------------------------------------------
void CThemeColor::Draw()
{
	// 処理なし
}

//-----------------------------------------------------------------------------
// 色の取得
//-----------------------------------------------------------------------------
D3DXCOLOR CThemeColor::GetColor(int inConfig)
{
	// 指定されたKeyが存在するか否か
	if (m_color.count(inConfig) == 0)
	{ // Keyが設定されてなかった場合
		return D3DXCOLOR(0.0f,0.0f,0.0f,1.0f);
	}

	/* ↓Keyが設定されていた場合↓ */

	return m_color[inConfig];
}

//-----------------------------------------------------------------------------
// テーマ色の決定
//-----------------------------------------------------------------------------
void CThemeColor::SetTheme(int idx)
{
	// jsonのコンテナをD3DXCOLORに変換する
	auto VectorToD3DXCOLOR = [this](int inIndex, int inColor)
	{
		// 指定番号に値が存在しているか否か
		if (colorFile["TYPE"].size() < inIndex || 0 > inIndex)
		{ // 指定番号に値が存在しない
			return D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
		}

		D3DXCOLOR color;

		color.r = colorFile["TYPE"].at(inIndex)["COLOR"].at(inColor)[0];	// 赤色の設定
		color.g = colorFile["TYPE"].at(inIndex)["COLOR"].at(inColor)[1];	// 緑色の設定
		color.b = colorFile["TYPE"].at(inIndex)["COLOR"].at(inColor)[2];	// 青色の設定
		color.a = colorFile["TYPE"].at(inIndex)["COLOR"].at(inColor)[3];	// 透明色の設定

		return color;
	};

	// 色の代入
	m_color.insert(std::make_pair(0, VectorToD3DXCOLOR(idx, 0)));	// メイン色1
	m_color.insert(std::make_pair(1, VectorToD3DXCOLOR(idx, 1)));	// メイン色2
	m_color.insert(std::make_pair(2, VectorToD3DXCOLOR(idx, 2)));	// 背景色
	m_color.insert(std::make_pair(3, VectorToD3DXCOLOR(idx, 3)));	// サブ色

	if(colorFile["TYPE"].at(idx).count("BG") != 0)
	{
		CApplication::GetInstance()->GetTextureClass()->Load("BG",colorFile["TYPE"].at(idx)["BG"]);
	}
}
